{
  "address": "0x508b037CE0b9e1e4bE7C00Babb5f3b32E347D044",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "name": "deployContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "deployments",
      "outputs": [
        {
          "internalType": "contract AutomatedPayment",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x267611db80e9d4ab10bf009143faf64e131ffffa6b630c75b94c6bff42d5a466",
  "receipt": {
    "to": null,
    "from": "0x11a626e808427091147eF35C1790557453Bdf79F",
    "contractAddress": "0x508b037CE0b9e1e4bE7C00Babb5f3b32E347D044",
    "transactionIndex": 3,
    "gasUsed": "1631630",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xf1ecc4830c7619b49ebc5700eab9a4fee7c351e118c21ca4358fdaddd0a27c13",
    "transactionHash": "0x267611db80e9d4ab10bf009143faf64e131ffffa6b630c75b94c6bff42d5a466",
    "logs": [],
    "blockNumber": 11051760,
    "cumulativeGasUsed": "1695460",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "922e25cd49cfd5ebe38754b7a7abd827",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"name\":\"deployContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployments\",\"outputs\":[{\"internalType\":\"contract AutomatedPayment\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AutometaFactory.sol\":\"Autometa\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"contracts/AutomatedPayment.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\n\\r\\nerror AutomatedPayment__NotFound();\\r\\nerror AutomatedPayment__OnlyOwnerAllowed();\\r\\nerror AutomatedPayment__NotEnoughFunds();\\r\\nerror AutomatedPayment__NotEnoughTimePassed();\\r\\nerror AutomatedPayment__CannotPerformUpkeep();\\r\\n\\r\\ncontract AutomatedPayment is KeeperCompatibleInterface {\\r\\n    uint256 public immutable i_interval;\\r\\n    uint256 public startTime;\\r\\n    address public immutable i_owner;\\r\\n    address payable[] public employees;\\r\\n    address[] public funders;\\r\\n\\r\\n    mapping(address => uint256) coorespondingEmployeeSalary;\\r\\n    mapping(address => uint256) public coorespondingFunderAmount;\\r\\n\\r\\n    constructor(address owner, uint256 interval) {\\r\\n        i_owner = owner;\\r\\n        i_interval = interval;\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        fund();\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        funders.push(msg.sender);\\r\\n        coorespondingFunderAmount[msg.sender] += msg.value;\\r\\n    }\\r\\n\\r\\n    function addEmployee(address payable employee, uint256 salary)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        employees.push(employee);\\r\\n        coorespondingEmployeeSalary[employee] = salary;\\r\\n    }\\r\\n\\r\\n    function updateEmployeeSalary(address employee, uint256 salary)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        uint256 index = isEmployee(employee);\\r\\n        coorespondingEmployeeSalary[employee] = salary;\\r\\n    }\\r\\n\\r\\n    function deleteEmployee(address employee) public onlyOwner {\\r\\n        uint256 index = isEmployee(employee);\\r\\n        employees[index] = employees[employees.length - 1];\\r\\n        employees.pop();\\r\\n\\r\\n        delete coorespondingEmployeeSalary[employee];\\r\\n    }\\r\\n\\r\\n    function isEmployee(address employee) public view returns (uint256) {\\r\\n        for (uint256 i = 0; i < employees.length; i++) {\\r\\n            if (employees[i] == employee) {\\r\\n                return i;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        revert AutomatedPayment__NotFound();\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes memory /*checkData*/\\r\\n    )\\r\\n        public\\r\\n        view\\r\\n        override\\r\\n        returns (\\r\\n            bool upKeepNeeded,\\r\\n            bytes memory /* performData*/\\r\\n        )\\r\\n    {\\r\\n        bool timePassed = (block.timestamp - startTime) > i_interval;\\r\\n        bool enoughFunds = (address(this).balance >= getTotalSalariesAmount());\\r\\n        bool employeeExist = employees.length >= 1;\\r\\n        upKeepNeeded = (timePassed && enoughFunds && employeeExist);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(\\r\\n        bytes memory /*performData*/\\r\\n    ) external override {\\r\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\r\\n        if (!upkeepNeeded) {\\r\\n            revert AutomatedPayment__CannotPerformUpkeep();\\r\\n        }\\r\\n        for (uint256 i = 0; i < employees.length; i++) {\\r\\n            employees[i].transfer(coorespondingEmployeeSalary[employees[i]]);\\r\\n        }\\r\\n        startTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function getBalance() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunders() public view returns (address[] memory) {\\r\\n        return funders;\\r\\n    }\\r\\n\\r\\n    function getEmployees() public view returns (address payable[] memory) {\\r\\n        return employees;\\r\\n    }\\r\\n\\r\\n    function getEmployeeSalary(address employee) public view returns (uint256) {\\r\\n        return coorespondingEmployeeSalary[employee];\\r\\n    }\\r\\n\\r\\n    function getTotalSalariesAmount() internal view returns (uint256) {\\r\\n        uint256 totalAmount;\\r\\n        for (uint256 i = 0; i < employees.length; i++) {\\r\\n            totalAmount += coorespondingEmployeeSalary[employees[i]];\\r\\n        }\\r\\n\\r\\n        return totalAmount;\\r\\n    }\\r\\n\\r\\n    function getInterval() public view returns (uint256) {\\r\\n        return i_interval;\\r\\n    }\\r\\n\\r\\n    modifier areEnoughFundsAvailable() {\\r\\n        uint256 totalAmount = getTotalSalariesAmount();\\r\\n        if (totalAmount > address(this).balance)\\r\\n            revert AutomatedPayment__NotEnoughFunds();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (i_owner != msg.sender) revert AutomatedPayment__OnlyOwnerAllowed();\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7bb9437fe1f75379c8ef56c3cae121802eec1a2f7dd645822045250be7282fe8\",\"license\":\"MIT\"},\"contracts/AutometaFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\nimport \\\"./AutomatedPayment.sol\\\";\\r\\n\\r\\ncontract Autometa {\\r\\n    mapping(address => AutomatedPayment) public deployments;\\r\\n\\r\\n    function deployContract(uint256 interval) external returns (address) {\\r\\n        AutomatedPayment t = new AutomatedPayment(msg.sender, interval);\\r\\n        deployments[msg.sender] = (t);\\r\\n        return address(t);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xdf4a607bf9f1adb376bec23a34588323abaf53cfa900ba5b8d0b953bd97952a9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611cb1806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80631cf41a811461003b578063316b37391461006b575b600080fd5b610055600480360381019061005091906101d7565b61009b565b6040516100629190610245565b60405180910390f35b6100856004803603810190610080919061028c565b61015c565b6040516100929190610318565b60405180910390f35b60008033836040516100ac9061018f565b6100b7929190610342565b604051809103906000f0801580156100d3573d6000803e3d6000fd5b509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080915050919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119108061036c83390190565b600080fd5b6000819050919050565b6101b4816101a1565b81146101bf57600080fd5b50565b6000813590506101d1816101ab565b92915050565b6000602082840312156101ed576101ec61019c565b5b60006101fb848285016101c2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061022f82610204565b9050919050565b61023f81610224565b82525050565b600060208201905061025a6000830184610236565b92915050565b61026981610224565b811461027457600080fd5b50565b60008135905061028681610260565b92915050565b6000602082840312156102a2576102a161019c565b5b60006102b084828501610277565b91505092915050565b6000819050919050565b60006102de6102d96102d484610204565b6102b9565b610204565b9050919050565b60006102f0826102c3565b9050919050565b6000610302826102e5565b9050919050565b610312816102f7565b82525050565b600060208201905061032d6000830184610309565b92915050565b61033c816101a1565b82525050565b60006040820190506103576000830185610236565b6103646020830184610333565b939250505056fe60c06040523480156200001157600080fd5b506040516200191038038062001910833981810160405281019062000037919062000127565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505080608081815250504260008190555050506200016e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b48262000087565b9050919050565b620000c681620000a7565b8114620000d257600080fd5b50565b600081519050620000e681620000bb565b92915050565b6000819050919050565b6200010181620000ec565b81146200010d57600080fd5b50565b6000815190506200012181620000f6565b92915050565b6000806040838503121562000141576200014062000082565b5b60006200015185828601620000d5565b9250506020620001648582860162000110565b9150509250929050565b60805160a051611752620001be6000396000818161087c01528181610a8001528181610ace01528181610b480152610de10152600081816107d0015281816107fa0152610aa801526117526000f3fe6080604052600436106101185760003560e01c806378e97925116100a0578063dc0d3dff11610064578063dc0d3dff146103aa578063e7fd9a13146103e7578063ea63a04414610410578063ea66543f1461043b578063ec34ece81461047857610127565b806378e97925146102f4578063893d20e81461031f57806391ad27b41461034a578063b60d428814610375578063dba6335f1461037f57610127565b80636775a4c2116100e75780636775a4c2146101e85780636919207d146102255780636e04ff0d146102505780636e7c4ab11461028e5780636f5be0d6146102b757610127565b806312065fe01461012c5780634585e33b146101575780634739326b146101805780634abefa36146101bd57610127565b36610127576101256104a1565b005b600080fd5b34801561013857600080fd5b5061014161055c565b60405161014e9190610f75565b60405180910390f35b34801561016357600080fd5b5061017e600480360381019061017991906110ea565b610564565b005b34801561018c57600080fd5b506101a760048036038101906101a2919061115f565b6106e9565b6040516101b491906111cd565b60405180910390f35b3480156101c957600080fd5b506101d2610728565b6040516101df91906112a6565b60405180910390f35b3480156101f457600080fd5b5061020f600480360381019061020a9190611306565b6107b6565b60405161021c9190610f75565b60405180910390f35b34801561023157600080fd5b5061023a6107ce565b6040516102479190610f75565b60405180910390f35b34801561025c57600080fd5b50610277600480360381019061027291906110ea565b6107f2565b6040516102859291906113d6565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611306565b610863565b005b3480156102c357600080fd5b506102de60048036038101906102d99190611306565b610a2d565b6040516102eb9190610f75565b60405180910390f35b34801561030057600080fd5b50610309610a76565b6040516103169190610f75565b60405180910390f35b34801561032b57600080fd5b50610334610a7c565b6040516103419190611415565b60405180910390f35b34801561035657600080fd5b5061035f610aa4565b60405161036c9190610f75565b60405180910390f35b61037d6104a1565b005b34801561038b57600080fd5b50610394610acc565b6040516103a19190611415565b60405180910390f35b3480156103b657600080fd5b506103d160048036038101906103cc919061115f565b610af0565b6040516103de9190611415565b60405180910390f35b3480156103f357600080fd5b5061040e6004803603810190610409919061145c565b610b2f565b005b34801561041c57600080fd5b50610425610c5f565b604051610432919061155a565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d9190611306565b610ced565b60405161046f9190610f75565b60405180910390f35b34801561048457600080fd5b5061049f600480360381019061049a919061157c565b610dc8565b005b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055391906115eb565b92505081905550565b600047905090565b600061057e604051806020016040528060008152506107f2565b509050806105b8576040517f4098bdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156106dd57600181815481106105dc576105db611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600360006001858154811061063857610637611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156106c9573d6000803e3d6000fd5b5080806106d590611670565b9150506105bb565b50426000819055505050565b600181815481106106f957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060018054806020026020016040519081016040528092919081815260200182805480156107ac57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610762575b5050505050905090565b60046020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006000544261082791906116b9565b1190506000610834610ea3565b4710159050600060018080549050101590508280156108505750815b80156108595750805b9450505050915091565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146108e8576040517f6cdf338d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108f382610ced565b9050600180808054905061090791906116b9565b8154811061091857610917611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061095757610956611641565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018054806109b1576109b06116ed565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60028181548110610b0057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610bb4576040517f6cdf338d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c99575b5050505050905090565b600080600090505b600180549050811015610d90578273ffffffffffffffffffffffffffffffffffffffff1660018281548110610d2d57610d2c611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d7d5780915050610dc3565b8080610d8890611670565b915050610cf5565b506040517f54ed597e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610e4d576040517f6cdf338d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e5883610ced565b905081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60008060005b600180549050811015610f54576003600060018381548110610ece57610ecd611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610f3f91906115eb565b91508080610f4c90611670565b915050610ea9565b508091505090565b6000819050919050565b610f6f81610f5c565b82525050565b6000602082019050610f8a6000830184610f66565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ff782610fae565b810181811067ffffffffffffffff8211171561101657611015610fbf565b5b80604052505050565b6000611029610f90565b90506110358282610fee565b919050565b600067ffffffffffffffff82111561105557611054610fbf565b5b61105e82610fae565b9050602081019050919050565b82818337600083830152505050565b600061108d6110888461103a565b61101f565b9050828152602081018484840111156110a9576110a8610fa9565b5b6110b484828561106b565b509392505050565b600082601f8301126110d1576110d0610fa4565b5b81356110e184826020860161107a565b91505092915050565b600060208284031215611100576110ff610f9a565b5b600082013567ffffffffffffffff81111561111e5761111d610f9f565b5b61112a848285016110bc565b91505092915050565b61113c81610f5c565b811461114757600080fd5b50565b60008135905061115981611133565b92915050565b60006020828403121561117557611174610f9a565b5b60006111838482850161114a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111b78261118c565b9050919050565b6111c7816111ac565b82525050565b60006020820190506111e260008301846111be565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61121d816111ac565b82525050565b600061122f8383611214565b60208301905092915050565b6000602082019050919050565b6000611253826111e8565b61125d81856111f3565b935061126883611204565b8060005b838110156112995781516112808882611223565b975061128b8361123b565b92505060018101905061126c565b5085935050505092915050565b600060208201905081810360008301526112c08184611248565b905092915050565b60006112d38261118c565b9050919050565b6112e3816112c8565b81146112ee57600080fd5b50565b600081359050611300816112da565b92915050565b60006020828403121561131c5761131b610f9a565b5b600061132a848285016112f1565b91505092915050565b60008115159050919050565b61134881611333565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561138857808201518184015260208101905061136d565b83811115611397576000848401525b50505050565b60006113a88261134e565b6113b28185611359565b93506113c281856020860161136a565b6113cb81610fae565b840191505092915050565b60006040820190506113eb600083018561133f565b81810360208301526113fd818461139d565b90509392505050565b61140f816112c8565b82525050565b600060208201905061142a6000830184611406565b92915050565b611439816111ac565b811461144457600080fd5b50565b60008135905061145681611430565b92915050565b6000806040838503121561147357611472610f9a565b5b600061148185828601611447565b92505060206114928582860161114a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6114d1816112c8565b82525050565b60006114e383836114c8565b60208301905092915050565b6000602082019050919050565b60006115078261149c565b61151181856114a7565b935061151c836114b8565b8060005b8381101561154d57815161153488826114d7565b975061153f836114ef565b925050600181019050611520565b5085935050505092915050565b6000602082019050818103600083015261157481846114fc565b905092915050565b6000806040838503121561159357611592610f9a565b5b60006115a1858286016112f1565b92505060206115b28582860161114a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115f682610f5c565b915061160183610f5c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611636576116356115bc565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061167b82610f5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116ae576116ad6115bc565b5b600182019050919050565b60006116c482610f5c565b91506116cf83610f5c565b9250828210156116e2576116e16115bc565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220df429c2324c07b7da41454e79ffd893f7f9d08cfde494759eb2d6e4c89332ebc64736f6c63430008090033a2646970667358221220a61b8a7985a157c0a25a4211dfe631aba7003e3277d8828734a46bd24b71841164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80631cf41a811461003b578063316b37391461006b575b600080fd5b610055600480360381019061005091906101d7565b61009b565b6040516100629190610245565b60405180910390f35b6100856004803603810190610080919061028c565b61015c565b6040516100929190610318565b60405180910390f35b60008033836040516100ac9061018f565b6100b7929190610342565b604051809103906000f0801580156100d3573d6000803e3d6000fd5b509050806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080915050919050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119108061036c83390190565b600080fd5b6000819050919050565b6101b4816101a1565b81146101bf57600080fd5b50565b6000813590506101d1816101ab565b92915050565b6000602082840312156101ed576101ec61019c565b5b60006101fb848285016101c2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061022f82610204565b9050919050565b61023f81610224565b82525050565b600060208201905061025a6000830184610236565b92915050565b61026981610224565b811461027457600080fd5b50565b60008135905061028681610260565b92915050565b6000602082840312156102a2576102a161019c565b5b60006102b084828501610277565b91505092915050565b6000819050919050565b60006102de6102d96102d484610204565b6102b9565b610204565b9050919050565b60006102f0826102c3565b9050919050565b6000610302826102e5565b9050919050565b610312816102f7565b82525050565b600060208201905061032d6000830184610309565b92915050565b61033c816101a1565b82525050565b60006040820190506103576000830185610236565b6103646020830184610333565b939250505056fe60c06040523480156200001157600080fd5b506040516200191038038062001910833981810160405281019062000037919062000127565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505080608081815250504260008190555050506200016e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b48262000087565b9050919050565b620000c681620000a7565b8114620000d257600080fd5b50565b600081519050620000e681620000bb565b92915050565b6000819050919050565b6200010181620000ec565b81146200010d57600080fd5b50565b6000815190506200012181620000f6565b92915050565b6000806040838503121562000141576200014062000082565b5b60006200015185828601620000d5565b9250506020620001648582860162000110565b9150509250929050565b60805160a051611752620001be6000396000818161087c01528181610a8001528181610ace01528181610b480152610de10152600081816107d0015281816107fa0152610aa801526117526000f3fe6080604052600436106101185760003560e01c806378e97925116100a0578063dc0d3dff11610064578063dc0d3dff146103aa578063e7fd9a13146103e7578063ea63a04414610410578063ea66543f1461043b578063ec34ece81461047857610127565b806378e97925146102f4578063893d20e81461031f57806391ad27b41461034a578063b60d428814610375578063dba6335f1461037f57610127565b80636775a4c2116100e75780636775a4c2146101e85780636919207d146102255780636e04ff0d146102505780636e7c4ab11461028e5780636f5be0d6146102b757610127565b806312065fe01461012c5780634585e33b146101575780634739326b146101805780634abefa36146101bd57610127565b36610127576101256104a1565b005b600080fd5b34801561013857600080fd5b5061014161055c565b60405161014e9190610f75565b60405180910390f35b34801561016357600080fd5b5061017e600480360381019061017991906110ea565b610564565b005b34801561018c57600080fd5b506101a760048036038101906101a2919061115f565b6106e9565b6040516101b491906111cd565b60405180910390f35b3480156101c957600080fd5b506101d2610728565b6040516101df91906112a6565b60405180910390f35b3480156101f457600080fd5b5061020f600480360381019061020a9190611306565b6107b6565b60405161021c9190610f75565b60405180910390f35b34801561023157600080fd5b5061023a6107ce565b6040516102479190610f75565b60405180910390f35b34801561025c57600080fd5b50610277600480360381019061027291906110ea565b6107f2565b6040516102859291906113d6565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611306565b610863565b005b3480156102c357600080fd5b506102de60048036038101906102d99190611306565b610a2d565b6040516102eb9190610f75565b60405180910390f35b34801561030057600080fd5b50610309610a76565b6040516103169190610f75565b60405180910390f35b34801561032b57600080fd5b50610334610a7c565b6040516103419190611415565b60405180910390f35b34801561035657600080fd5b5061035f610aa4565b60405161036c9190610f75565b60405180910390f35b61037d6104a1565b005b34801561038b57600080fd5b50610394610acc565b6040516103a19190611415565b60405180910390f35b3480156103b657600080fd5b506103d160048036038101906103cc919061115f565b610af0565b6040516103de9190611415565b60405180910390f35b3480156103f357600080fd5b5061040e6004803603810190610409919061145c565b610b2f565b005b34801561041c57600080fd5b50610425610c5f565b604051610432919061155a565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d9190611306565b610ced565b60405161046f9190610f75565b60405180910390f35b34801561048457600080fd5b5061049f600480360381019061049a919061157c565b610dc8565b005b6002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461055391906115eb565b92505081905550565b600047905090565b600061057e604051806020016040528060008152506107f2565b509050806105b8576040517f4098bdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156106dd57600181815481106105dc576105db611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc600360006001858154811061063857610637611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156106c9573d6000803e3d6000fd5b5080806106d590611670565b9150506105bb565b50426000819055505050565b600181815481106106f957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060018054806020026020016040519081016040528092919081815260200182805480156107ac57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610762575b5050505050905090565b60046020528060005260406000206000915090505481565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000606060007f00000000000000000000000000000000000000000000000000000000000000006000544261082791906116b9565b1190506000610834610ea3565b4710159050600060018080549050101590508280156108505750815b80156108595750805b9450505050915091565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146108e8576040517f6cdf338d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006108f382610ced565b9050600180808054905061090791906116b9565b8154811061091857610917611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001828154811061095757610956611641565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060018054806109b1576109b06116ed565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60005481565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60028181548110610b0057600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610bb4576040517f6cdf338d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60606002805480602002602001604051908101604052809291908181526020018280548015610ce357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c99575b5050505050905090565b600080600090505b600180549050811015610d90578273ffffffffffffffffffffffffffffffffffffffff1660018281548110610d2d57610d2c611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610d7d5780915050610dc3565b8080610d8890611670565b915050610cf5565b506040517f54ed597e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610e4d576040517f6cdf338d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e5883610ced565b905081600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60008060005b600180549050811015610f54576003600060018381548110610ece57610ecd611641565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610f3f91906115eb565b91508080610f4c90611670565b915050610ea9565b508091505090565b6000819050919050565b610f6f81610f5c565b82525050565b6000602082019050610f8a6000830184610f66565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ff782610fae565b810181811067ffffffffffffffff8211171561101657611015610fbf565b5b80604052505050565b6000611029610f90565b90506110358282610fee565b919050565b600067ffffffffffffffff82111561105557611054610fbf565b5b61105e82610fae565b9050602081019050919050565b82818337600083830152505050565b600061108d6110888461103a565b61101f565b9050828152602081018484840111156110a9576110a8610fa9565b5b6110b484828561106b565b509392505050565b600082601f8301126110d1576110d0610fa4565b5b81356110e184826020860161107a565b91505092915050565b600060208284031215611100576110ff610f9a565b5b600082013567ffffffffffffffff81111561111e5761111d610f9f565b5b61112a848285016110bc565b91505092915050565b61113c81610f5c565b811461114757600080fd5b50565b60008135905061115981611133565b92915050565b60006020828403121561117557611174610f9a565b5b60006111838482850161114a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111b78261118c565b9050919050565b6111c7816111ac565b82525050565b60006020820190506111e260008301846111be565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61121d816111ac565b82525050565b600061122f8383611214565b60208301905092915050565b6000602082019050919050565b6000611253826111e8565b61125d81856111f3565b935061126883611204565b8060005b838110156112995781516112808882611223565b975061128b8361123b565b92505060018101905061126c565b5085935050505092915050565b600060208201905081810360008301526112c08184611248565b905092915050565b60006112d38261118c565b9050919050565b6112e3816112c8565b81146112ee57600080fd5b50565b600081359050611300816112da565b92915050565b60006020828403121561131c5761131b610f9a565b5b600061132a848285016112f1565b91505092915050565b60008115159050919050565b61134881611333565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561138857808201518184015260208101905061136d565b83811115611397576000848401525b50505050565b60006113a88261134e565b6113b28185611359565b93506113c281856020860161136a565b6113cb81610fae565b840191505092915050565b60006040820190506113eb600083018561133f565b81810360208301526113fd818461139d565b90509392505050565b61140f816112c8565b82525050565b600060208201905061142a6000830184611406565b92915050565b611439816111ac565b811461144457600080fd5b50565b60008135905061145681611430565b92915050565b6000806040838503121561147357611472610f9a565b5b600061148185828601611447565b92505060206114928582860161114a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6114d1816112c8565b82525050565b60006114e383836114c8565b60208301905092915050565b6000602082019050919050565b60006115078261149c565b61151181856114a7565b935061151c836114b8565b8060005b8381101561154d57815161153488826114d7565b975061153f836114ef565b925050600181019050611520565b5085935050505092915050565b6000602082019050818103600083015261157481846114fc565b905092915050565b6000806040838503121561159357611592610f9a565b5b60006115a1858286016112f1565b92505060206115b28582860161114a565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115f682610f5c565b915061160183610f5c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611636576116356115bc565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061167b82610f5c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156116ae576116ad6115bc565b5b600182019050919050565b60006116c482610f5c565b91506116cf83610f5c565b9250828210156116e2576116e16115bc565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220df429c2324c07b7da41454e79ffd893f7f9d08cfde494759eb2d6e4c89332ebc64736f6c63430008090033a2646970667358221220a61b8a7985a157c0a25a4211dfe631aba7003e3277d8828734a46bd24b71841164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 441,
        "contract": "contracts/AutometaFactory.sol:Autometa",
        "label": "deployments",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_contract(AutomatedPayment)433)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(AutomatedPayment)433": {
        "encoding": "inplace",
        "label": "contract AutomatedPayment",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_contract(AutomatedPayment)433)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract AutomatedPayment)",
        "numberOfBytes": "32",
        "value": "t_contract(AutomatedPayment)433"
      }
    }
  }
}